<?xml version="1.0" encoding="UTF-8"?>
<xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified"
           targetNamespace="http://www.griphyn.org/2006/08/vdl" version="1.0"
           xmlns="http://www.griphyn.org/2006/08/vdl"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:ns="http://www.griphyn.org/2006/08/vdl">
  <xs:annotation>
    <xs:documentation>This XML schema defines the structures of key VDL
    elements</xs:documentation>
  </xs:annotation>

  <xs:element name="program">
    <xs:complexType>
      <xs:sequence>
        <xs:element minOccurs="0" ref="types"/>

        <xs:element maxOccurs="unbounded" minOccurs="0" name="procedure"
                    type="Procedure"/>

        <xs:sequence maxOccurs="unbounded" minOccurs="0">
          <xs:annotation>
            <xs:documentation>defines the workflow structure for the main
            program</xs:documentation>
          </xs:annotation>

          <xs:group ref="ComponentGroup"/>
        </xs:sequence>
      </xs:sequence>

      <xs:attribute name="targetNamespace" type="xs:anyURI">
        <xs:annotation>
          <xs:documentation>the target namespace for the definitions in the
          program</xs:documentation>
        </xs:annotation>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name="types">
    <xs:complexType>
      <xs:sequence>
        <xs:annotation>
          <xs:documentation>XML Schema definitions for
          types</xs:documentation>
        </xs:annotation>

        <xs:any maxOccurs="unbounded" minOccurs="0" namespace="##other"
                processContents="lax"/>
      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="Procedure">
    <xs:annotation>
      <xs:documentation>a procedure defines the logical interface of a
      process, and the workflow structure if it is a compound
      procedure</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:sequence maxOccurs="unbounded" minOccurs="0">
        <xs:annotation>
          <xs:documentation>specifies the interface of the procedure, more
          specifically, its inputs and outputs</xs:documentation>
        </xs:annotation>

        <xs:element maxOccurs="unbounded" minOccurs="0" name="output"
                    type="FormalParameter">
          <xs:annotation>
            <xs:documentation>specify an output parameter of the procedure,
            there can be multiple outputs</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element maxOccurs="unbounded" minOccurs="0" name="input"
                    type="FormalParameter">
          <xs:annotation>
            <xs:documentation>specifies an input parameter to the procedure,
            there can be multiple inputs</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>

      <xs:choice>
        <xs:annotation>
          <xs:documentation>the body of a procedure can be either an
          application or service invocation, or a compound workflow
          structure</xs:documentation>
        </xs:annotation>

        <xs:element name="binding" type="Binding"/>

        <xs:sequence maxOccurs="unbounded" minOccurs="0">
          <xs:annotation>
            <xs:documentation>defines the workflow structure if this is a
            compound procedure</xs:documentation>
          </xs:annotation>

          <xs:group ref="ComponentGroup"/>
        </xs:sequence>
      </xs:choice>
    </xs:sequence>

    <xs:attribute name="name" type="xs:NCName">
      <xs:annotation>
        <xs:documentation>the name of the procedure</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="FormalParameter">
    <xs:annotation>
      <xs:documentation>defines a parameter, which has a name, a type, and an
      optional default value</xs:documentation>
    </xs:annotation>

    <xs:attribute name="name" type="xs:NCName" use="required"/>

    <xs:attribute name="type" type="xs:QName" use="required"/>

    <xs:attribute default="false" name="isArray" type="xs:boolean"/>

    <xs:attribute name="default" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Binding">
    <xs:annotation>
      <xs:documentation>specifies the binding of an atomic procedure to its
      implementation, which can be either an application or a Web
      service</xs:documentation>
    </xs:annotation>

    <xs:choice>
      <xs:element name="application" type="ApplicationBinding"/>

      <xs:element name="service" type="ServiceBinding"/>
    </xs:choice>

    <xs:attribute name="type" type="xs:string">
      <xs:annotation>
        <xs:documentation>specifies the type of the binding, current supported
        bindings are AppBinding and ServiceBinding. we may define other
        bindings later, and this type attribute should ideally be a
        QName.</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="ApplicationBinding">
    <xs:annotation>
      <xs:documentation>Defines a binding to an application</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element minOccurs="0" name="appenv">
        <xs:annotation>
          <xs:documentation>Specifies the environment in which the application
          runs</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="executable">
        <xs:annotation>
          <xs:documentation>Specifies the location and name of the
          application</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:sequence>
        <xs:sequence maxOccurs="unbounded" minOccurs="0">
          <xs:element name="argument" type="Argument"/>
        </xs:sequence>

        <xs:element minOccurs="0" name="stdin" type="Argument">
          <xs:annotation>
            <xs:documentation>Specifies redirection mapping for
            stdin</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element minOccurs="0" name="stdout" type="Argument">
          <xs:annotation>
            <xs:documentation>Specifies redirection mapping for
            stdout</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element minOccurs="0" name="stderr" type="Argument">
          <xs:annotation>
            <xs:documentation>Specifies redirection mapping for
            stderr</xs:documentation>
          </xs:annotation>
        </xs:element>

        <xs:element maxOccurs="unbounded" minOccurs="0" name="profile"
                    type="Profile">
          <xs:annotation>
            <xs:documentation>Specifies other required information for the
            application to run</xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType mixed="true" name="Argument">
    <xs:sequence maxOccurs="unbounded">
      <xs:group ref="ArgumentGroup"/>
    </xs:sequence>
  </xs:complexType>

  <xs:group name="ArgumentGroup">
    <xs:sequence>
      <xs:element minOccurs="0" name="function" type="Function"/>
    </xs:sequence>
  </xs:group>

  <xs:complexType mixed="true" name="Function">
    <xs:annotation>
      <xs:documentation>A mapping function, the paramters to the function
      itself can be text, reference and function.</xs:documentation>
    </xs:annotation>

    <xs:sequence maxOccurs="unbounded" minOccurs="0">
		<xs:group ref="ArgumentGroup"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:NMTOKEN">
      <xs:annotation>
        <xs:documentation>name of the mapping function</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType mixed="true" name="Profile">
    <xs:annotation>
      <xs:documentation>profile specifies configuration information pertaining
      to the execution of the application or service. For instance,
      environment variables, Globus config, etc...</xs:documentation>
    </xs:annotation>

    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:group ref="ArgumentGroup"/>
    </xs:sequence>

    <xs:attribute name="namespace" type="xs:NMTOKEN">
      <xs:annotation>
        <xs:documentation>namespace here denotes a specific scope that the key
        belongs to</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="key" type="xs:NMTOKEN" use="required"/>
  </xs:complexType>

  <xs:complexType name="ServiceBinding">
    <xs:annotation>
      <xs:documentation>Defines a binding to a wsdl service</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element name="wsdluri">
        <xs:annotation>
          <xs:documentation>The URI to the wsdl defintion</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element minOccurs="0" name="portype">
        <xs:annotation>
          <xs:documentation>The portType name defined in the wsdl
          doc</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="operation">
        <xs:annotation>
          <xs:documentation>The operation defined in the wsdl
          doc</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element minOccurs="0" name="request" type="Message">
        <xs:annotation>
          <xs:documentation>Specifies the mapping from inputs to soap request
          message of the operation</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element minOccurs="0" name="response" type="Message">
        <xs:annotation>
          <xs:documentation>Specifies the mapping from soap response message
          to ouputs</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType mixed="true" name="Message">
    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:element name="part" type="Part"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Part">
    <xs:sequence>
      <xs:group ref="ArgumentGroup"/>
    </xs:sequence>

    <xs:attribute name="name" type="xs:string">
      <xs:annotation>
        <xs:documentation>Selects the part to map to</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="Array">
    <xs:annotation>
      <xs:documentation>defines an array which contains a sequence of
      elements</xs:documentation>
    </xs:annotation>

    <xs:sequence maxOccurs="unbounded" minOccurs="0">
      <xs:element name="element"/>
    </xs:sequence>
  </xs:complexType>

  <xs:complexType name="Range">
    <xs:annotation>
      <xs:documentation>defines a range, which is a set of values within an
      inclusive range.</xs:documentation>
    </xs:annotation>

    <xs:attribute name="from" use="required"/>

    <xs:attribute name="to" use="required"/>

    <xs:attribute name="step"/>
  </xs:complexType>

  <xs:complexType mixed="true" name="Variable">
    <xs:annotation>
      <xs:documentation>defines a variable, which has a name, a type, and it
      may be a collection (an array) and may have an associated initial
      value.</xs:documentation>
    </xs:annotation>

    <xs:choice maxOccurs="1" minOccurs="0">
      <xs:element name="array" type="Array"/>

      <xs:element name="range" type="Range"/>
	  
	  <xs:element name="function" type="Function"/>
    </xs:choice>

    <xs:attribute name="name" type="xs:NCName" use="required"/>

    <xs:attribute name="type" type="xs:QName" use="required"/>

    <xs:attribute name="isArray" type="xs:boolean"/>
  </xs:complexType>

  <xs:complexType name="Dataset">
    <xs:annotation>
      <xs:documentation>defines a dataset-bound variable, which has the
      dataset handle information, such as name, type, mapping descriptor and
      mapping parameters.</xs:documentation>
    </xs:annotation>

    <xs:choice>
      <xs:element name="file">
        <xs:complexType>
          <xs:annotation>
            <xs:documentation>For specific cases where a dataset is mapped to
            a file</xs:documentation>
          </xs:annotation>

          <xs:attribute name="name" type="xs:string"/>
        </xs:complexType>
      </xs:element>

      <xs:element name="mapping">
        <xs:complexType>
          <xs:sequence maxOccurs="unbounded" minOccurs="0">
            <xs:element name="param">
              <xs:complexType mixed="true">
                <xs:sequence maxOccurs="unbounded" minOccurs="0">
                  <xs:group ref="ArgumentGroup"/>
                </xs:sequence>

                <xs:attribute name="name" type="xs:NMTOKEN" use="required"/>

                <xs:attribute name="value" type="xs:string"/>
              </xs:complexType>
            </xs:element>
          </xs:sequence>

          <xs:attribute name="descriptor" type="xs:string" use="required"/>
        </xs:complexType>
      </xs:element>
    </xs:choice>

    <xs:attribute name="name" type="xs:NCName"/>

    <xs:attribute name="type" type="xs:QName" use="required"/>
	
	<xs:attribute name="isArray" type="xs:boolean"/>
  </xs:complexType>

  <xs:simpleType name="Mode">
    <xs:annotation>
      <xs:documentation>specifies whether a set of nodes should run parallelly
      or sequentially</xs:documentation>
    </xs:annotation>

    <xs:restriction base="xs:string">
      <xs:enumeration value="parallel"/>

      <xs:enumeration value="sequential"/>
    </xs:restriction>
  </xs:simpleType>

  <xs:complexType mixed="true" name="ActualParameter">
    <xs:annotation>
      <xs:documentation>defines an actual parameter value that can be bound to
      a formal parameter when calling a procedure</xs:documentation>
    </xs:annotation>

    <xs:choice maxOccurs="1" minOccurs="0">
      <xs:element name="array" type="Array"/>

      <xs:element name="range" type="Range"/>
    </xs:choice>

    <xs:attribute name="bind" type="xs:NMTOKEN" use="optional">
      <xs:annotation>
        <xs:documentation>specifies the formal parameter name, for positional
        call, the name is not required</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType mixed="true" name="Assign">
    <xs:annotation>
      <xs:documentation>assigns an expression to a variable reference
      (l-value)</xs:documentation>
    </xs:annotation>

    <xs:choice maxOccurs="1" minOccurs="0">
      <xs:element name="array" type="Array"/>

      <xs:element name="range" type="Range"/>
	  
	  <xs:element name="function" type="Function"/>
    </xs:choice>

    <xs:attribute name="to" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Call">
    <xs:annotation>
      <xs:documentation>a call essentially defines a task to perform, it calls
      a procedure with actual paramters</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="output"
                  type="ActualParameter">
        <xs:annotation>
          <xs:documentation>specifies an expression for an output
          parameter</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element maxOccurs="unbounded" minOccurs="0" name="input"
                  type="ActualParameter">
        <xs:annotation>
          <xs:documentation>specifies a value or an expression for an input
          parameter</xs:documentation>
        </xs:annotation>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="id" type="xs:ID" use="optional">
      <xs:annotation>
        <xs:documentation>a unique id of the call, the call id is referenced
        in transition</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="proc" type="xs:QName" use="required">
      <xs:annotation>
        <xs:documentation>specifies the name of the procedure to
        call</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:group name="ComponentGroup">
    <xs:annotation>
      <xs:documentation>defines the group of elements that can be specified in
      a compound procedure</xs:documentation>
    </xs:annotation>

    <xs:choice>
      <xs:element name="variable" type="Variable">
        <xs:annotation>
          <xs:documentation>defines an intermediate variable, so that it can
          link the output of one node to the input of another
          node</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="dataset" type="Dataset">
        <xs:annotation>
          <xs:documentation>defines an dataset, which can be passed to a call
          as an actual parameter</xs:documentation>
        </xs:annotation>
      </xs:element>

      <xs:element name="assign" type="Assign"/>

      <xs:element name="call" type="Call"/>

      <xs:group ref="ControlGroup"/>
    </xs:choice>
  </xs:group>

  <xs:complexType name="Foreach">
    <xs:annotation>
      <xs:documentation>iterate over a set of items</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
    </xs:sequence>

    <xs:attribute name="var" type="xs:NMTOKEN">
      <xs:annotation>
        <xs:documentation>the variable name to hold each
        item</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="in" type="xs:string">
      <xs:annotation>
        <xs:documentation>the items to iterate over</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="begin" type="xs:int">
      <xs:annotation>
        <xs:documentation>the begin index of the items</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="end" type="xs:int">
      <xs:annotation>
        <xs:documentation>the end index of the items</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="step" type="xs:int">
      <xs:annotation>
        <xs:documentation>the step for each iteration</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="indexVar" type="xs:NMTOKEN">
      <xs:annotation>
        <xs:documentation>the variable name to hold the index
        value</xs:documentation>
      </xs:annotation>
    </xs:attribute>

    <xs:attribute name="mode" type="Mode">
      <xs:annotation>
        <xs:documentation>whether the iteration can be run parallely or
        sequentially</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:complexType name="If">
    <xs:sequence>
      <xs:element minOccurs="0" name="then">
        <xs:complexType>
          <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
        </xs:complexType>
      </xs:element>

      <xs:element minOccurs="0" name="else">
        <xs:complexType>
          <xs:sequence>
            <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="test" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="While">
    <xs:annotation>
      <xs:documentation>a while loop, the loop continues as long as the test
      evaluates to true</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
    </xs:sequence>

    <xs:attribute name="test" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Repeat">
    <xs:annotation>
      <xs:documentation>a repeat loop, the loop continues until a condition is
      met</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
    </xs:sequence>

    <xs:attribute name="until" type="xs:string"/>
  </xs:complexType>

  <xs:complexType name="Switch">
    <xs:annotation>
      <xs:documentation>specifies conditional branches</xs:documentation>
    </xs:annotation>

    <xs:sequence>
      <xs:sequence maxOccurs="unbounded" minOccurs="0">
        <xs:element name="case">
          <xs:annotation>
            <xs:documentation>each case specifies a branching condition and
            the actions</xs:documentation>
          </xs:annotation>

          <xs:complexType>
            <xs:sequence>
              <xs:group maxOccurs="unbounded" minOccurs="0"
                        ref="ComponentGroup"/>
            </xs:sequence>

            <xs:attribute name="value" type="xs:string" use="required"/>

            <xs:attribute name="fallThrough" type="xs:boolean">
              <xs:annotation>
                <xs:documentation>whether to fall through to the next
                case</xs:documentation>
              </xs:annotation>
            </xs:attribute>
          </xs:complexType>
        </xs:element>
      </xs:sequence>

      <xs:element minOccurs="0" name="default">
        <xs:annotation>
          <xs:documentation>the default case, when none of the cases is
          met</xs:documentation>
        </xs:annotation>

        <xs:complexType>
          <xs:sequence>
            <xs:group maxOccurs="unbounded" minOccurs="0" ref="ComponentGroup"/>
          </xs:sequence>
        </xs:complexType>
      </xs:element>
    </xs:sequence>

    <xs:attribute name="test" type="xs:string">
      <xs:annotation>
        <xs:documentation>the expression to evaluate</xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:complexType>

  <xs:group name="ControlGroup">
    <xs:annotation>
      <xs:documentation>specifies the control patterns in the
      workflow</xs:documentation>
    </xs:annotation>

    <xs:choice>
      <xs:element name="foreach" type="Foreach"/>

      <xs:element name="if" type="If"/>

      <xs:element name="while" type="While"/>

      <xs:element name="repeat" type="Repeat"/>

      <xs:element name="switch" type="Switch"/>

      <xs:element name="continue"/>

      <xs:element name="break"/>
    </xs:choice>
  </xs:group>
</xs:schema>