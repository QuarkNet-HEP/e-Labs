---------------------
How to compile (except for qnetdaq)
make programName.exe

and will produce programName.exe from programName.cc
This was done to make it easy to use each program as a template to
produce a specialized (and differently named) analysis routine.
Just copy the template, make changes, save as a new name, compile.

Almost all programs want a file or a list of files on the commandline.
It will process these files in order.

If there are options, they must be preceeded with -- (two dashes)
so they do not look like filenames.

The options are apparent from the code in the .cc file. 
In some cases they are also available if you call the program with no arg
And if the option assigns a value to something, the syntax is 
--option=value

---------------------
What is here (very brief description)

include has the class definition and routines all within a .h file
(they are not separated into .h and .cc to produce libraries, because
 the programs I write are otherwise short and self-contained.  It 
 would be trivial to make this separation when it is needed.) 

include/qnetevent.h 
encapsulates the routines to read in the raw data stream
and build events from groups of data lines.  It does not do higher
order corrections to the GPS timing or error finding because it is
designed to work very generically on streams with very few assumptions
There are some hooks available, but not fully implemented, to do this.
It also works if there with firmware > 29 and no gps data at all.

include/qnetevnentlist.h 
wraps the code to manage one or a sequence of data files so that an
analysis routine can treat the entire sequence as a single long list
of events, regardless of how many individual files they come from.
The file list can be given as a simple list on the command line, or
as a separate file containing the list.  The latter option requires
you to set a switch, and is used in the coincidence finding code.

include/qnetsingles.h
Looks for and extracts singles information from the DS command that
might (or might not) be in the data files.  The current implementation
does not play nicely with qneteventlist, see the code for runsummary
for how this is used.  For the benefit of live DAQ programs, it can
understand system time as well as GPS time, so you can monitor things,
even with no GPS, or with very low counting rate.

include/rikhistogram.h
A very lightweight histogram class.  It is leftover from a very early
C++ programming exercise I did in the early days of my thesis work.
It has the nice feature that it fits neatly into a single .h file,
and is trivial to include.  But, its text output format does not
simply match anything that other people use, though it is easy to
reformat.  Probably if you are doing things that are very serious,
you want to use a real heavy-duty histogram library.

programs avaialble

qnetdaq
Is a DAQ program that runs on linux.  Its primary purpose is to send
the requested settings to the card, then read from the serial port and 
make a file of what it read.  It also counts the number of events it 
sees and restarts a file after so much time or so many events.  It works
with old (version 20 and 23) and the latest (version 29 and higher) card
firmware, and also works with version 29 and no GPS data.
  To build this, simply type make.

rawread
A very simple program that uses qnetevent.h to read data from a file.

simpleread
A simple program that uses qneteventlist.h to read data.  This is the
most useful one for doing analysis.

**almost all analysis routines are based on either simpleread or rawread**

runsummary
uses rawread, qnetevent, and qnetsingles to produce a summary of what
is contained in a data file.  Makes as few assumptions about what might
be there, but tries to find singles data.

channelpairs
Makes a map of the time difference between each of six pairs of channels
and writes a histogram of this information.  Good for looking for timing
offsets and also evaluating the random background for systematic effects.

coincidence
Takes n lists of files and searches them for coincident events.  Each 
card (i.e. a school taking data) must have a file that contains a list 
of data files that must already be ordered in chronological order.  Then
the program takes however many sites there are, and systematically looks
for events that fall within some specified time window, and spits out
any matches to stdout.
  To build this, type> make coincidence.exe
  But you probably also need to use or modify the shell scripts to run.
  makelists.sh makes a bunch of file_*.txt files with lists of datafiles.
  then run.sh sends all of these into the coincidence.exe program.

other programs

formaterrors
In particular, counts the orphan errors, cases where a line happened
too many trigger counts after the previous line to be a part of that
open gate, but does not have a first-line-flag indicating it is part
of another gate.  Have not yet written code to automatically recover
this kind of thing.

twodeltat
Uses simpleread to look at three or four hit coincidences.
Takes the time difference between the first pair of hits and the 
second pair of hits and generates a text file with both numbers.
You can then do a scatter plot of this and look for asymmetry.

livetime
Calculates the livetime of a file from the data.

misc-analysis
Two "typical" analysis routines.  One makes a histogram of the time
from one event to the next.  The other makes a histogram of the 
width of pulses observed in the events.
