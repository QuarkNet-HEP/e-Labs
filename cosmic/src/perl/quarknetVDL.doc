VDL TUTORIAL
    The VDL's soul purpose is to connect the perl scripts that we have written by providing and saving the variables that are needed for our scripts. The VDL is actually a Grid-Computing language, so in theory our scripts could be executed with the same interface, but on the grid. The VDL is made out of two parts the transformation and derivation. 
    The transforms are designed to specify the order in which variables are fed into individual scripts. The derivations are then used to define what data or filename the variables hold. At this point, each transformation and derivation corresponds to a single perl script. The transformation defines how to load data to the script, where the derivation defines what data is loaded (a kind of test).
    The idea behind our implementation is that multiple scripts can be combined together to do an analysis, this is dubbed a compound. A compound is nothing more than a transformation that calls other transformations. A compound derivation is once again, just setting the data for the compound.

THE STEPS REQUIRED FOR COMPOUND IMPLEMENTATION
1) LOGIN "https://blacknuss.cs.uchicago.edu:8443/chimera/login.jsp"
2) LOAD PERL SCRIPT
    Hit the "Load Application" link.
    *The TR Name would be "Quarknet.Cosmic.Test::NAME" if the vdl is being loaded in the test space.
    *The TR Name would be "Quarknet.Cosmic::NAME" if vdl is ready for public consumption.
        **NOTE: TR name shouldn't contain "*.pl", it will automatically append it, as it loads the file.
3) LOAD INDIVIDUAL TRANSFORM
    A)LOADING TRANSFORMATION
        hit the "Load VDL" link.
        1) Enter name and parameters that will be passed in.
            * 
                || TR Quarknet.Cosmic.Test::TRANSFORMNAME(none transform1-one-data, input transform1-fileInput, output transform1-fileOutput) ||
                
                **This is a transform named "TRANSFORMNAME" under the Cosmic test area
                **The parameters don't have to be in any particular order, all that is being done is the introduction of parameters and their types.
                    //PARAMETER TYPES
                        'none' generally is a non-filename parameter that the perl script uses.
                        'input' specifies the file that the script uses as input.
                        'output' specifies the file that the script writes out to.
        2) Enter in proper order the arguments defined above.
        
             ||
                {
                argument = ${transform1-fileInput};
                argument = ${transform1-fileOutput};
                argument = ${transform1-one-data};
                }
             ||

                ** This section specifies in what order the parameters are used by the script
                ||     
                    argument= ${transform1-fileInput}
                ||        
                the variable to the right is an argument to the perl scrip.
                ** ORDER IS REALLY IMPORTANT, OTHERWISE PERL SCRIPTS WOULD BE LOADED WITH WRONG INPUTS.
                ** NOTE: do not blindly copy and paste other transforms, because vdl might chance order of arguments
                ** NOTE: if needs arise to use a list as an input use the escape character
                    a) input arguments that will use a list with    ||  argument = "'"${rawData}"'";    ||
                    b) after uploading vdl will change to be        ||  argument = "\'"${rawData}"\'";  ||
                    c) if you were to upload || "\'" || instead of || "'" || then it wouldn't be understood 
                ***NOTE: some lists like the ones used in combine.pl, don't need the escape character
        3) hit the "load" button, to upload transform
    B)LOADING DERIVATION
        1) Find your transformation (press its location folder to reload scripts)
        2) hit the "Create DV" button
        3) Enter your variables in the form.
            The variables are the actual data or filenames that the perl script uses as input
        4)  ||
            DV Quarknet.Cosmic.Test::DERIVATIONNAME->Quarknet.Cosmic.Test::TRANSFORMNAME(
                transform1-fileInput=[ @{input:"1.file"},@{input:"2.file"} ],
                transform1-fileOutput=@{output:"both.file"},
                transform1-one-data="123" )
            ||
                * First line specifies what this derivation is feeding data into
                * one-data is an example of inputting a scalar value to a transform
                * fileOutput specifies the syntax for specifying the file to write out to
                * fileInput shows the syntax for the input of many files into a list argument
                ** NOTE: DO NOT LEAVE ANY SPACES BETWEEN quotation marks AND (DATA OR FILENAMES).
				** that applies also when using the graphical interphase
				** in derivation graphical interphase, if you want to input a list type in the names delimited by commas, DON'T USE SPACES
        5) hit the "update" button
        6) test the derivation by going back to the derivation and clicking the "Derive" link.
            a) view graph
            b) execute.
4) LOAD COMPOUND TRANSFORM
    A) follow the same steps as adding a transform, but pay attention to some differences
        1) ||
                TR Quarknet.Cosmic.Test::SomeStudy(
                none compound-one-data,
                none compound-two-data,
                inout compound-IntermediateFile,
                input compound-inputFile[],
                output compound-outputFile )
            ||
            *There is a new type of variable, the "inout", this means that this particular variable is both an input and output in seperate transcripts.
            * "inputFile[]" the brackets signify that this is a list
        2)
            ||
                {   
                 call Quarknet.Cosmic.Test::OneTransform(
                 transform1-fileInput=${input:compound-inputFile},
                 transform1-fileOutput=${output:compound-IntermediateFile}, 
                 transform1-one-data=${compound-one-data} );
                 call Quarknet.Cosmic.Test::TwoTransform(
                 transform2-fileInput=${input:compound-IntermediateFile},
                 transform2-fileOutput=${output:compound-outputFile} 
				 transform2-data=${compound-two-data} );
                }
            ||
            *At this point order doesn't matter, as long as the propfer variables are set for each transformation
			*NOTICE: the left hand side variables refer to the individual transformations, 
				and right hand variable names refer to the Compound transform.

	B) Compound Derivation
		Follow the same steps as the singular derivation, but now you will set all the Compond transformation variables
		||
            DV Quarknet.Cosmic.Test::derivation.of.somestudy->Quarknet.Cosmic.Test::SomeStudy(
                compound-inputFile=[ @{input:"1.file"},@{input:"2.file"} ],
				compound-IntermediateFile=@{inout:"both.file"};
				compound-outputFile=@{output:"final.file"};
				compound-one-data="123";
				compound-two-data="456" )
		||
			*In derivation you can actually set the inout property of a file to be output, that way, the file is giong to be displayed in the VDL interphase, and also in JSP.
			*I am not quite sure when to use '[]' notation.
