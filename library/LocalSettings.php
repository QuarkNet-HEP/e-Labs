<?php  
/***********************************************************************\ 
 * LocalSettings.php for QuarkNet Fellows' Library
 * 
 * This file was automatically generated by the MediaWiki installer
 * on 11 September 2007, then modified by Eric Myers <myers@spy-hill.net>
 *
 * See includes/DefaultSettings.php for all configurable settings
 * and their default values, but don't forget to make changes in _this_
 * file, not there.
 *
 * If you customize your file layout, set $IP to the directory that contains
 * the other MediaWiki files. It will be used as a base to locate files.
 *
 * First Created: -EAM 11Sep2007
 * Last changed:  -EAM 23Jan2008
 * 
 * @(#) $Id: LocalSettings.php,v 1.10 2009/05/07 20:33:07 myers Exp $ 
\***********************************************************************/
if( defined( 'MW_INSTALL_PATH' ) ) {
	$IP = MW_INSTALL_PATH;
} else {
	$IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

require_once( "includes/DefaultSettings.php" );

# If PHP's memory limit is very low, some operations may fail.'
ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
  if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
    die( "This script must be run from the command line\n" );
  }
}

################################### 
# Paths and URLs: 

$wgSitename         = "QNFellows";

// Set the session name to match the BOINC project, if there is one 

$wgSessionName      = "boinc_session"; //to match the BOINC project 


## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
$wgScriptPath       = "/cosmic/library";

$elab = "none";
$referer = $_SERVER['HTTP_REFERER']; 
$self = $_SERVER['PHP_SELF']; 
$url_pattern=",^/elab/(\w+)/teacher/,";
$n = preg_match($url_pattern, $self, $matches);
if($n>0) list($all, $elab) = $matches;



## Default skin: you can change the default skin. Use the internal symbolic
## names, ie 'standard', 'nostalgia', 'cologneblue', 'monobook':
$wgDefaultSkin = 'monobook';
$wgAllowUserCss = true;

# Logo images:
#
$wgLogo              = $wgScriptPath."/QNsplat2.jpg";
$wgFavicon           = $wgScriptPath."/blast_icon.gif";


if( $elab == "cosmic" ){
  $wgLogo = "/elab/cosmic/graphics/blast.jpg";
  $wgScriptPath = "/elab/cosmic/teacher/library";
  $wgDefaultSkin = 'cosmic';
  $wgSitename    = "Teachers' Library";
  $wgCookiePath = '/';
  $wgMainPage = "Cosmic Ray e-Lab Teacher Community";
  $BOINC_prefix = "/elab/cosmic/teacher/forum";
}

if( $elab == "ligo" || $elab == "LIGO" ){
  $wgLogo = "/elab/ligo/graphics/LIGOicon.jpg";
  $wgScriptPath = "/elab/ligo/teacher/library";
  $wgDefaultSkin = 'cosmic';
  $wgSitename    = "LIGO Teachers' Library";
  $wgCookiePath = '/';
  $wgMainPage = "LIGO e-Lab Teaching Community";
  $BOINC_prefix = "/elab/ligo/teacher/forum";
}

$wgScript           = "$wgScriptPath/index.php";
$wgRedirectScript   = "$wgScriptPath/redirect.php";


## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
## If using PHP as a CGI module, the ?title= style usually must be used.
$wgArticlePath      = "$wgScript/$1";
##$wgArticlePath      = "$wgScript?title=$1";


$wgEnableEmail      = true;
$wgEnableUserEmail  = true;

$wgEmergencyContact = "myers@spy-hill.net";
$wgPasswordSender = "apache@spy-hill.net";



## For a detailed description of the following switches see
## http://meta.wikimedia.org/Enotif and http://meta.wikimedia.org/Eauthent
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = true; # UPO
$wgEnotifWatchlist = true; # UPO
$wgEmailAuthentication = true;

$wgUseImageMagick = true;
$wgImageMagickConvertCommand = "/usr/bin/convert";

$wgDiff3 = "/usr/bin/diff3";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;

$wgLocalInterwiki   = $wgSitename;

$wgLanguageCode = "en";

$wgProxyKey = "9f44150580c1a0e8c85d74cbd17b899ab0d75b8b89d109ee7e86242f2365b462";


## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used


######################################################################
# Cache control & settings:

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
#
$configdate = gmdate( 'YmdHis', @filemtime( __FILE__ ) );
$wgCacheEpoch = max( $wgCacheEpoch, $configdate );

$wgCachePages=false;
$wgUseFileCache = false;

# Shared memory (cache) settings: 

$wgMainCacheType = CACHE_NONE;
$wgMessageCacheType = CACHE_NONE;

/** Directory where the cached page will be saved */
$wgFileCacheDirectory = "{$wgUploadDirectory}/cache";

$wgParserCacheType = CACHE_NONE;
$wgEnableParserCache = false;
$wgParserCacheExpireTime = 60;

$wgMemCachedServers = array();
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;


/***********************************************************************
 * Upload Configuration:
 */

$wgUploadPath       = "$wgScriptPath/upload";
$wgUploadDirectory  = "$IP/upload";

# This sets the size at which users are warned about the size of
# an upload file, but it does not actually set a hard limit.
# Limits are set in the PHP configuration file php.ini 
# (/usr/local/etc/php.ini on www13, perhaps /etc/php.ini elsewhere)
# Be sure to set both upload_max_filesize AND post_max_size
#
$wgUploadSizeWarning = 17*1024*1024;

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads		= true;


## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
$wgHashedUploadDirectory = true;

## If you want to allow any file extension to be uploaded:
#$wgStrictFileExtensions = false;

# Or specify file extenstions which are allowed, above and beyond
# the standard image extensions:
#
$wgFileExtensions =
    array_merge($wgFileExtensions,
                array( 'pdf', 'doc', 'ppt', 'xls', 'kml', 'kmz',
		'ps', 'eps' )
                );


# To show links to non-image uploaded files we need to allow
# embeded external images for the icon.  Could this be abused?
# Or use Image: namespace for the icons.
#
$wgAllowExternalImages = true;


## If PHP configuration does not have proper MIME type detection you
## may be able to fix MIME detection by being this specific:

#$wgMimeDetectorCommand= "/usr/bin/file -bi ";


/***********************************************************************
 * Debugging
 */

# This debug log file should be not be publicly accessible if it is used, as it
# may contain private data. 
##$wgDebugLogFile         = '/home/i2u2/log_alvarez/mediawiki-debug.log';

# See meta:How_to_debug_MediaWiki for information on profiling

# DEBUG:

require_once('/home/i2u2/boinc/html/include/debug.php');
//set_debug_level(3);


/***********************************************************************
 * Policy settings:
 */

// Disabled as per MediaWIki-announce of 22Jan2008
//  (We shouldn't be using this anyway)
//
$wgEnableAPI = false;


# Disable edits until we can control user access!!!  
#$wgReadOnly="The wiki is read-only while we work on moving it";

$wgEmergencyContact = "myers@spy-hill.net";
$wgPasswordSender   = "i2u2-admin@spy-hill.net";

# Turn this back to true for production, but have it off for design and development
$wgEnableParserCache = false;

# Don't allow anonymouse comments on talk pages
$wgDisableAnonTalk=true;


/** 
 * Should editors be required to have a validated e-mail
 * address before being allowed to edit?   Not yet, but someday.
 */
$wgEmailConfirmToEdit=false;

unset($wgWhitelistAccount['user']);


/**
 * Settings added to this array will override the default globals for the user
 * preferences used by anonymous visitors and newly created accounts.
 */

$wgDefaultUserOptions ['editsection'] = 0;


/**********************************************
 * Extensions:
 */ 

# Citations via <ref> text </ref> and <references/>
require_once( "{$IP}/extensions/Cite/Cite.php" ); 

# Allow editing of talk pages (or not) even if not allowed to edit articles
require_once("extensions/talkright.php");

# Allow permissions to be set on an entire namespace
require_once( "extensions/NamespacePermissions.php" ); 

# Turn the Media: pseudo-namespace into File:
require_once( "extensions/Media2File.php" );  

#  Automatic BOINC authentication:
#
require_once("extensions/BOINCAuthPlugin.php"); 
$BOINC_html = "/home/i2u2/boinc/html/";
$BOINC_config_xml = "/home/i2u2/boinc/config.xml";

# This is where login/logout forms will be obtained.
if( empty($BOINC_prefix ) ){
  $BOINC_prefix='/cosmic/library';
}


/***********
# Multiple languages in a single wiki                                           
require_once( "$IP/extensions/Polyglot/Polyglot.php" );
$wgPolyglotLanguages = array('en', 'es', 'de', 'fr');
$wfPolyglotExcemptTalkPages=true;
$wfPolyglotFollowRedirects=true;

# Parser Functions are used by the Google-trans template                        
require_once( "$IP/extensions/ParserFunctions/ParserFunctions.php" );
*********/

# Display pages based on skin name as alternate page entry point                
require_once( "$IP/extensions/SkinByURL.php" );

# Display pages based on skin name as alternate page entry point                
require_once( "$IP/extensions/inputbox.php" );


# {{elab}} (and other magic words?)
require_once("$IP/extensions/MagicWords.php");	


################################### 
# Database settings are stored elsewhere (not in SVN!)
#
include("DatabaseSettings.php");


/**
 * Permissions and Groups:
 */


/* Implicit group for all visitors (hence all anonymous users)
 * This is where we disable anonymous account creation, page creation, etc.. */

$wgGroupPermissions['*'    ]['read']            = true;
$wgGroupPermissions['*'    ]['talk']            = false; 
$wgGroupPermissions['*'    ]['edit']            = false;
$wgGroupPermissions['*'    ]['createtalk']      = false;
$wgGroupPermissions['*'    ]['createpage']      = false;
$wgGroupPermissions['*'    ]['upload']          = false;
$wgGroupPermissions['*'    ]['createaccount']   = false;

/**********************
 * I think this causes a bug when you logout, so turn it off for now.
 * Only really needed if $wgGroupPermissions['*'    ]['read'] = false;
 * -EAM 20 Sept 2007
# Even if reading is disallowed, these pages are allowed.

$wgWhitelistRead = array( ":Main Page", "Special:Userlogin",
                          ":QuarkNet Fellows Library",
                          "-",
                          "MediaWiki:Monobook.css" );
************************/


/* General group for all _authenticated users_  But is that enough? */

$wgGroupPermissions['user' ]['read']            = true;
$wgGroupPermissions['user' ]['talk']            = true;
$wgGroupPermissions['user' ]['createtalk']      = true;
$wgGroupPermissions['user' ]['edit']            = false;
$wgGroupPermissions['user' ]['createpage']      = false;
$wgGroupPermissions['user' ]['upload']          = false;
$wgGroupPermissions['user' ]['createaccount']   = false;

/**
 * Temporary: allow anybody until we have user classification working.
 */

$wgGroupPermissions['user' ]['edit']            = true;
$wgGroupPermissions['user' ]['createpage']      = true;
$wgGroupPermissions['user' ]['upload']          = true;

/* Let "bureaucrats" also use 'patrol' (but see officers and chiefs below) */
 
$wgGroupPermissions['bureaucrat']['patrol']         = true;
$wgGroupPermissions['bureaucrat' ]['edit']          = true;
$wgGroupPermissions['bureaucrat' ]['createtalk']    = true;
$wgGroupPermissions['bureaucrat' ]['createpage']    = true;
$wgGroupPermissions['bureaucrat' ]['upload']        = true;
$wgGroupPermissions['bureaucrat' ]['createaccount'] = false;
$wgGroupPermissions['bureaucrat']['move']           = true;
$wgGroupPermissions['bureaucrat']['rollback'] = true;
$wgGroupPermissions['bureaucrat']['protect'] = true;
$wgGroupPermissions['bureaucrat']['block'] = true;


// The permissions for groups based on BOINC special-user bits
// are kept in this separate file:
//
require_once("QNFellowsPermissions.php");

?>
